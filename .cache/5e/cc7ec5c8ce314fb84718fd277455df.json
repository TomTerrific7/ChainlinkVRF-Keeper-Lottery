{"id":"node_modules/async/map.js","dependencies":[{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/package.json","includedInParent":true,"mtime":1630226493026},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/package.json","includedInParent":true,"mtime":1630224191821},{"name":"./internal/doParallel","loc":{"line":7,"column":26},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/map.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/internal/doParallel.js"},{"name":"./internal/map","loc":{"line":11,"column":19},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/map.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/internal/map.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _doParallel = require('./internal/doParallel');\n\nvar _doParallel2 = _interopRequireDefault(_doParallel);\n\nvar _map = require('./internal/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nexports.default = (0, _doParallel2.default)(_map2.default);\nmodule.exports = exports['default'];"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/async/map.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/async/map.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/async/map.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/async/map.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/async/map.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/async/map.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/async/map.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/async/map.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/async/map.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/async/map.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/async/map.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/async/map.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/async/map.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/async/map.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/async/map.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/async/map.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/async/map.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/async/map.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/async/map.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/async/map.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/async/map.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/async/map.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/async/map.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/async/map.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/async/map.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/async/map.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/async/map.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/async/map.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/async/map.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/async/map.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/async/map.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/async/map.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/async/map.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/async/map.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/async/map.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/async/map.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/async/map.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/async/map.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/async/map.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/async/map.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/async/map.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/async/map.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/async/map.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/async/map.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/async/map.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/async/map.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/async/map.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/async/map.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/async/map.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/async/map.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/async/map.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/async/map.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/async/map.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/async/map.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/async/map.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _doParallel = require('./internal/doParallel');\n\nvar _doParallel2 = _interopRequireDefault(_doParallel);\n\nvar _map = require('./internal/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nexports.default = (0, _doParallel2.default)(_map2.default);\nmodule.exports = exports['default'];"},"lineCount":54}},"error":null,"hash":"b438eb02b8924a26beee4bcedd8aa2d8","cacheData":{"env":{}}}