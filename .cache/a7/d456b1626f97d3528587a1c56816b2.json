{"id":"node_modules/async/parallel.js","dependencies":[{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/package.json","includedInParent":true,"mtime":1630226493026},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/package.json","includedInParent":true,"mtime":1630224191821},{"name":"./eachOf","loc":{"line":8,"column":22},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/parallel.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/eachOf.js"},{"name":"./internal/parallel","loc":{"line":12,"column":24},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/parallel.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/async/internal/parallel.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parallelLimit;\n\nvar _eachOf = require('./eachOf');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n  (0, _parallel2.default)(_eachOf2.default, tasks, callback);\n}\nmodule.exports = exports['default'];"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/async/parallel.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/async/parallel.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}}],"sources":{"node_modules/async/parallel.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parallelLimit;\n\nvar _eachOf = require('./eachOf');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n  (0, _parallel2.default)(_eachOf2.default, tasks, callback);\n}\nmodule.exports = exports['default'];"},"lineCount":90}},"error":null,"hash":"5cf543023abf14210836bc8069104da0","cacheData":{"env":{}}}