{"id":"node_modules/typedarray-to-buffer/index.js","dependencies":[{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/package.json","includedInParent":true,"mtime":1630226493026},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/typedarray-to-buffer/package.json","includedInParent":true,"mtime":1630224934486},{"name":"is-typedarray","loc":{"line":10,"column":27},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/typedarray-to-buffer/index.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/is-typedarray/index.js"},{"name":"buffer","parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/typedarray-to-buffer/index.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n/**\n * Convert a typed array to a Buffer without a copy\n *\n * Author:   Feross Aboukhadijeh <https://feross.org>\n * License:  MIT\n *\n * `npm install typedarray-to-buffer`\n */\n\nvar isTypedArray = require('is-typedarray').strict\n\nmodule.exports = function typedarrayToBuffer (arr) {\n  if (isTypedArray(arr)) {\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer\n    var buf = Buffer.from(arr.buffer)\n    if (arr.byteLength !== arr.buffer.byteLength) {\n      // Respect the \"view\", i.e. byteOffset and byteLength, without doing a copy\n      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)\n    }\n    return buf\n  } else {\n    // Pass through all other types to `Buffer.from`\n    return Buffer.from(arr)\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/typedarray-to-buffer/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/typedarray-to-buffer/index.js":"/**\n * Convert a typed array to a Buffer without a copy\n *\n * Author:   Feross Aboukhadijeh <https://feross.org>\n * License:  MIT\n *\n * `npm install typedarray-to-buffer`\n */\n\nvar isTypedArray = require('is-typedarray').strict\n\nmodule.exports = function typedarrayToBuffer (arr) {\n  if (isTypedArray(arr)) {\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer\n    var buf = Buffer.from(arr.buffer)\n    if (arr.byteLength !== arr.buffer.byteLength) {\n      // Respect the \"view\", i.e. byteOffset and byteLength, without doing a copy\n      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)\n    }\n    return buf\n  } else {\n    // Pass through all other types to `Buffer.from`\n    return Buffer.from(arr)\n  }\n}\n"},"lineCount":27}},"error":null,"hash":"ed88b376452e07e2d91c07e59a73b57c","cacheData":{"env":{}}}