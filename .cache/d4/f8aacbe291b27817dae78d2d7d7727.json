{"id":"node_modules/ethereum-cryptography/random.js","dependencies":[{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/ethereum-cryptography/random.js.map","includedInParent":true,"mtime":1630224191761},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/ethereum-cryptography/src/random.ts","includedInParent":true,"mtime":1630224191965},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/package.json","includedInParent":true,"mtime":1630226493026},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/ethereum-cryptography/package.json","includedInParent":true,"mtime":1630224190507},{"name":"randombytes","loc":{"line":3,"column":26},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/ethereum-cryptography/random.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/randombytes/browser.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar randombytes = require(\"randombytes\");\nfunction getRandomBytes(bytes) {\n    return new Promise(function (resolve, reject) {\n        randombytes(bytes, function (err, resp) {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve(resp);\n        });\n    });\n}\nexports.getRandomBytes = getRandomBytes;\nfunction getRandomBytesSync(bytes) {\n    return randombytes(bytes);\n}\nexports.getRandomBytesSync = getRandomBytesSync;\n"},"sourceMaps":{"js":{"version":3,"file":"random.js","sourceRoot":"","sources":["src/random.ts"],"names":[],"mappings":";;AAAA,IAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAE3C,SAAgB,cAAc,CAAC,KAAa;IAC1C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,WAAW,CAAC,KAAK,EAAE,UAAS,GAAQ,EAAE,IAAY;YAChD,IAAI,GAAG,EAAE;gBACP,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,OAAO;aACR;YAED,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAXD,wCAWC;AAED,SAAgB,kBAAkB,CAAC,KAAa;IAC9C,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC;AAFD,gDAEC","sourcesContent":["const randombytes = require(\"randombytes\");\n\nexport function getRandomBytes(bytes: number): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    randombytes(bytes, function(err: any, resp: Buffer) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(resp);\n    });\n  });\n}\n\nexport function getRandomBytesSync(bytes: number): Buffer {\n  return randombytes(bytes);\n}\n"]}},"error":null,"hash":"eb7af94da6d556b6231a410a8cb5988f","cacheData":{"env":{}}}