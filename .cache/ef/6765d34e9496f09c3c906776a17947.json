{"id":"node_modules/eth-json-rpc-middleware/block-cache.js","dependencies":[{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/package.json","includedInParent":true,"mtime":1630226493026},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-json-rpc-middleware/package.json","includedInParent":true,"mtime":1630224934682},{"name":"./cache-utils.js","loc":{"line":1,"column":27},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-json-rpc-middleware/block-cache.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-json-rpc-middleware/cache-utils.js"},{"name":"json-rpc-engine/src/createAsyncMiddleware","loc":{"line":2,"column":38},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-json-rpc-middleware/block-cache.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"}],"generated":{"js":"const cacheUtils = require('./cache-utils.js')\nconst createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [undefined, null, '\\u003cnil\\u003e']\n\nmodule.exports = createBlockCacheMiddleware\n\n\nfunction createBlockCacheMiddleware(opts = {}) {\n  // validate options\n  const { blockTracker } = opts\n  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')\n\n  // create caching strategies\n  const blockCache = new BlockCacheStrategy()\n  const strategies = {\n    perma: blockCache,\n    block: blockCache,\n    fork: blockCache,\n  }\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    // allow cach to be skipped if so specified\n    if (req.skipCache) {\n      return next()\n    }\n    // check type and matching strategy\n    const type = cacheUtils.cacheTypeForPayload(req)\n    const strategy = strategies[type]\n    // If there's no strategy in place, pass it down the chain.\n    if (!strategy) {\n      return next()\n    }\n    // If the strategy can't cache this request, ignore it.\n    if (!strategy.canCacheRequest(req)) {\n      return next()\n    }\n\n    // get block reference (number or keyword)\n    let blockTag = cacheUtils.blockTagForPayload(req)\n    if (!blockTag) blockTag = 'latest'\n\n    // get exact block number\n    let requestedBlockNumber\n    if (blockTag === 'earliest') {\n      // this just exists for symmetry with \"latest\"\n      requestedBlockNumber = '0x00'\n    } else if (blockTag === 'latest') {\n      // fetch latest block number\n      const latestBlockNumber = await blockTracker.getLatestBlock()\n      // clear all cache before latest block\n      blockCache.clearBefore(latestBlockNumber)\n      requestedBlockNumber = latestBlockNumber\n    } else {\n      // We have a hex number\n      requestedBlockNumber = blockTag\n    }\n\n    // end on a hit, continue on a miss\n    const cacheResult = await strategy.get(req, requestedBlockNumber)\n    if (cacheResult === undefined) {\n      // cache miss\n      // wait for other middleware to handle request\n      await next()\n      // add result to cache\n      await strategy.set(req, requestedBlockNumber, res.result)\n    } else {\n      // fill in result from cache\n      res.result = cacheResult\n    }\n  })\n}\n\n\n//\n// Cache Strategies\n//\n\nclass BlockCacheStrategy {\n  \n  constructor () {\n    this.cache = {}\n  }\n\n  getBlockCacheForPayload (payload, blockNumberHex) {\n    const blockNumber = Number.parseInt(blockNumberHex, 16)\n    let blockCache = this.cache[blockNumber]\n    // create new cache if necesary\n    if (!blockCache) {\n      const newCache = {}\n      this.cache[blockNumber] = newCache\n      blockCache = newCache\n    }\n    return blockCache\n  }\n\n  async get (payload, requestedBlockNumber) {\n    // lookup block cache\n    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)\n    if (!blockCache) return\n    // lookup payload in block cache\n    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)\n    const cached = blockCache[identifier]\n    // may be undefined\n    return cached\n  }\n\n  async set (payload, requestedBlockNumber, result) {\n    // check if we can cached this result\n    const canCache = this.canCacheResult(payload, result)\n    if (!canCache) return\n    // set the value in the cache\n    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)\n    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)\n    blockCache[identifier] = result\n  }\n\n  canCacheRequest (payload) {\n    // check request method\n    if (!cacheUtils.canCache(payload)) {\n      return false\n    }\n    // check blockTag\n    const blockTag = cacheUtils.blockTagForPayload(payload)\n    if (blockTag === 'pending') {\n      return false\n    }\n    // can be cached\n    return true\n  }\n\n  canCacheResult (payload, result) {\n    // never cache empty values (e.g. undefined)\n    if (emptyValues.includes(result)) return\n    // check if transactions have block reference before caching\n    if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {\n      if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {\n        return false\n      }\n    }\n    // otherwise true\n    return true\n  }\n\n  // removes all block caches with block number lower than `oldBlockHex`\n  clearBefore (oldBlockHex){\n    const self = this\n    const oldBlockNumber = Number.parseInt(oldBlockHex, 16)\n    // clear old caches\n    Object.keys(self.cache)\n      .map(Number)\n      .filter(num => num < oldBlockNumber)\n      .forEach(num => delete self.cache[num])\n  }\n\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/eth-json-rpc-middleware/block-cache.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}}],"sources":{"node_modules/eth-json-rpc-middleware/block-cache.js":"const cacheUtils = require('./cache-utils.js')\nconst createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [undefined, null, '\\u003cnil\\u003e']\n\nmodule.exports = createBlockCacheMiddleware\n\n\nfunction createBlockCacheMiddleware(opts = {}) {\n  // validate options\n  const { blockTracker } = opts\n  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')\n\n  // create caching strategies\n  const blockCache = new BlockCacheStrategy()\n  const strategies = {\n    perma: blockCache,\n    block: blockCache,\n    fork: blockCache,\n  }\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    // allow cach to be skipped if so specified\n    if (req.skipCache) {\n      return next()\n    }\n    // check type and matching strategy\n    const type = cacheUtils.cacheTypeForPayload(req)\n    const strategy = strategies[type]\n    // If there's no strategy in place, pass it down the chain.\n    if (!strategy) {\n      return next()\n    }\n    // If the strategy can't cache this request, ignore it.\n    if (!strategy.canCacheRequest(req)) {\n      return next()\n    }\n\n    // get block reference (number or keyword)\n    let blockTag = cacheUtils.blockTagForPayload(req)\n    if (!blockTag) blockTag = 'latest'\n\n    // get exact block number\n    let requestedBlockNumber\n    if (blockTag === 'earliest') {\n      // this just exists for symmetry with \"latest\"\n      requestedBlockNumber = '0x00'\n    } else if (blockTag === 'latest') {\n      // fetch latest block number\n      const latestBlockNumber = await blockTracker.getLatestBlock()\n      // clear all cache before latest block\n      blockCache.clearBefore(latestBlockNumber)\n      requestedBlockNumber = latestBlockNumber\n    } else {\n      // We have a hex number\n      requestedBlockNumber = blockTag\n    }\n\n    // end on a hit, continue on a miss\n    const cacheResult = await strategy.get(req, requestedBlockNumber)\n    if (cacheResult === undefined) {\n      // cache miss\n      // wait for other middleware to handle request\n      await next()\n      // add result to cache\n      await strategy.set(req, requestedBlockNumber, res.result)\n    } else {\n      // fill in result from cache\n      res.result = cacheResult\n    }\n  })\n}\n\n\n//\n// Cache Strategies\n//\n\nclass BlockCacheStrategy {\n  \n  constructor () {\n    this.cache = {}\n  }\n\n  getBlockCacheForPayload (payload, blockNumberHex) {\n    const blockNumber = Number.parseInt(blockNumberHex, 16)\n    let blockCache = this.cache[blockNumber]\n    // create new cache if necesary\n    if (!blockCache) {\n      const newCache = {}\n      this.cache[blockNumber] = newCache\n      blockCache = newCache\n    }\n    return blockCache\n  }\n\n  async get (payload, requestedBlockNumber) {\n    // lookup block cache\n    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)\n    if (!blockCache) return\n    // lookup payload in block cache\n    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)\n    const cached = blockCache[identifier]\n    // may be undefined\n    return cached\n  }\n\n  async set (payload, requestedBlockNumber, result) {\n    // check if we can cached this result\n    const canCache = this.canCacheResult(payload, result)\n    if (!canCache) return\n    // set the value in the cache\n    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)\n    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)\n    blockCache[identifier] = result\n  }\n\n  canCacheRequest (payload) {\n    // check request method\n    if (!cacheUtils.canCache(payload)) {\n      return false\n    }\n    // check blockTag\n    const blockTag = cacheUtils.blockTagForPayload(payload)\n    if (blockTag === 'pending') {\n      return false\n    }\n    // can be cached\n    return true\n  }\n\n  canCacheResult (payload, result) {\n    // never cache empty values (e.g. undefined)\n    if (emptyValues.includes(result)) return\n    // check if transactions have block reference before caching\n    if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {\n      if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {\n        return false\n      }\n    }\n    // otherwise true\n    return true\n  }\n\n  // removes all block caches with block number lower than `oldBlockHex`\n  clearBefore (oldBlockHex){\n    const self = this\n    const oldBlockNumber = Number.parseInt(oldBlockHex, 16)\n    // clear old caches\n    Object.keys(self.cache)\n      .map(Number)\n      .filter(num => num < oldBlockNumber)\n      .forEach(num => delete self.cache[num])\n  }\n\n}\n"},"lineCount":157}},"error":null,"hash":"8fc7e2183fd2ef859279729b6d294b68","cacheData":{"env":{}}}