{"id":"node_modules/eth-query/index.js","dependencies":[{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/package.json","includedInParent":true,"mtime":1630226493026},{"name":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-query/package.json","includedInParent":true,"mtime":1630224934483},{"name":"xtend","loc":{"line":1,"column":23},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-query/index.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/xtend/immutable.js"},{"name":"json-rpc-random-id","loc":{"line":2,"column":31},"parent":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/eth-query/index.js","resolved":"/Users/tomterrific/Projects/Chainlink-Lottery/node_modules/json-rpc-random-id/index.js"}],"generated":{"js":"const extend = require('xtend')\nconst createRandomId = require('json-rpc-random-id')()\n\nmodule.exports = EthQuery\n\n\nfunction EthQuery(provider){\n  const self = this\n  self.currentProvider = provider\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')\nEthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')\nEthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')\nEthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')\nEthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')\n// standard\nEthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')\nEthQuery.prototype.syncing =                             generateFnFor('eth_syncing')\nEthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')\nEthQuery.prototype.mining =                              generateFnFor('eth_mining')\nEthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')\nEthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')\nEthQuery.prototype.accounts =                            generateFnFor('eth_accounts')\nEthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')\nEthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')\nEthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')\nEthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')\nEthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')\nEthQuery.prototype.sign =                                generateFnFor('eth_sign')\nEthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')\nEthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')\nEthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')\nEthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')\nEthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')\nEthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')\nEthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')\nEthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')\nEthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')\nEthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')\nEthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')\nEthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')\nEthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')\nEthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')\nEthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')\nEthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')\nEthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')\nEthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')\nEthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')\nEthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')\nEthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')\nEthQuery.prototype.getWork =                             generateFnFor('eth_getWork')\nEthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')\nEthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')\n\n// network level\n\nEthQuery.prototype.sendAsync = function(opts, cb){\n  const self = this\n  self.currentProvider.sendAsync(createPayload(opts), function(err, response){\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)\n    if (err) return cb(err)\n    cb(null, response.result)\n  })\n}\n\n// util\n\nfunction generateFnFor(methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    // set optional default block param\n    if (args.length < argCount) args.push('latest')\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/eth-query/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/eth-query/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}}],"sources":{"node_modules/eth-query/index.js":"const extend = require('xtend')\nconst createRandomId = require('json-rpc-random-id')()\n\nmodule.exports = EthQuery\n\n\nfunction EthQuery(provider){\n  const self = this\n  self.currentProvider = provider\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')\nEthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')\nEthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')\nEthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')\nEthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')\n// standard\nEthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')\nEthQuery.prototype.syncing =                             generateFnFor('eth_syncing')\nEthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')\nEthQuery.prototype.mining =                              generateFnFor('eth_mining')\nEthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')\nEthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')\nEthQuery.prototype.accounts =                            generateFnFor('eth_accounts')\nEthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')\nEthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')\nEthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')\nEthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')\nEthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')\nEthQuery.prototype.sign =                                generateFnFor('eth_sign')\nEthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')\nEthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')\nEthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')\nEthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')\nEthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')\nEthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')\nEthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')\nEthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')\nEthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')\nEthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')\nEthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')\nEthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')\nEthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')\nEthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')\nEthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')\nEthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')\nEthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')\nEthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')\nEthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')\nEthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')\nEthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')\nEthQuery.prototype.getWork =                             generateFnFor('eth_getWork')\nEthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')\nEthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')\n\n// network level\n\nEthQuery.prototype.sendAsync = function(opts, cb){\n  const self = this\n  self.currentProvider.sendAsync(createPayload(opts), function(err, response){\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)\n    if (err) return cb(err)\n    cb(null, response.result)\n  })\n}\n\n// util\n\nfunction generateFnFor(methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    // set optional default block param\n    if (args.length < argCount) args.push('latest')\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n"},"lineCount":110}},"error":null,"hash":"ddbe9a5f5062da69671c0430bb95f588","cacheData":{"env":{}}}