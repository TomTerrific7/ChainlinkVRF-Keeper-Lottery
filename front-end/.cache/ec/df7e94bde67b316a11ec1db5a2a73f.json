{"id":"../node_modules/eth-json-rpc-filters/log-filter.js","dependencies":[{"name":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/package.json","includedInParent":true,"mtime":1630963554441},{"name":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/package.json","includedInParent":true,"mtime":1630959934098},{"name":"eth-query","loc":{"line":1,"column":25},"parent":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/log-filter.js","resolved":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-query/index.js"},{"name":"pify","loc":{"line":2,"column":21},"parent":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/log-filter.js","resolved":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/node_modules/pify/index.js"},{"name":"./base-filter-history","loc":{"line":3,"column":38},"parent":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/log-filter.js","resolved":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/base-filter-history.js"},{"name":"./hexUtils","loc":{"line":4,"column":86},"parent":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/log-filter.js","resolved":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/hexUtils.js"}],"generated":{"js":"const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/log-filter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}}],"sources":{"../node_modules/eth-json-rpc-filters/log-filter.js":"const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n"},"lineCount":103}},"error":null,"hash":"5ba63ab75b5c89d6f368360c638fcbbe","cacheData":{"env":{}}}