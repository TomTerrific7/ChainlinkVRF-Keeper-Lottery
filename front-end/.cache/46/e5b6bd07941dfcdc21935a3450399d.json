{"id":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","dependencies":[{"name":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/package.json","includedInParent":true,"mtime":1630963554441},{"name":"/Users/tomterrific/Chainshot/ChainlinkVRF-Lottery/node_modules/eth-json-rpc-filters/package.json","includedInParent":true,"mtime":1630959934098}],"generated":{"js":"module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  const blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {\n      if (err) return reject(err)\n      resolve(res.result)\n    })\n  })\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/eth-json-rpc-filters/getBlocksForRange.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"../node_modules/eth-json-rpc-filters/getBlocksForRange.js":"module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  const blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {\n      if (err) return reject(err)\n      resolve(res.result)\n    })\n  })\n}\n"},"lineCount":44}},"error":null,"hash":"c941a18f955cf7e65e7ce5f10b6493d7","cacheData":{"env":{}}}